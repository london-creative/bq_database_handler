<?php
  /*
    Copyright 2010 Persistent Systems Limited

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   */

    /**
    * This code was generated by the tool 'PHPDataSvcUtil.php'.
    * Runtime Version:1.0
    *
    * Changes to this file may cause incorrect behavior and will be lost if
    * the code is regenerated.
    */

    require_once 'Context/ObjectContext.php';
    /**
    * Defines default OData Service URL for this proxy class
    */
    define("DEFAULT_ODATA_SERVICE_URL", "http://bqtest.edgedatasystems.co.uk/BQWatches.svc");
    
   /**
    * @class:Enquiry
    * @type:EntityType
    * @key:ID
    */
    class Enquiry extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Type;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ContactFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $NotificationFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $InitialDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ResultCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $ResultDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ExternalID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Qty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $InitialOffer;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $AgreedPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $TransactionDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $PaymentRef;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $UserFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Notes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Priority;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CampaignFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight9;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight14;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight18;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight22;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $WeightTotal;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Value;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:32
        * @FixedLength:false
        */
        public $SPDNumber;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ExpertFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $FormFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:128
        * @FixedLength:false
        */
        public $URL;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $InvoiceNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentMethod;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $ChequeCode;
    

       /**
        * Function to create an instance of Enquiry
        * @param Edm.Int32 $ID
        */
        public static function CreateEnquiry(
            $ID)
        {   
            $Enquiry = new Enquiry();
            $Enquiry->ID = $ID;
            return $Enquiry;
        }

       /**
        * Constructor for Enquiry
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Stock
    * @type:EntityType
    * @key:ID
    */
    class Stock extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $StockType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:12
        * @FixedLength:false
        */
        public $Ref;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ManufacturerFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ModelFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ModelVariantFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Gender;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Photographed;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $HasPapers;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $HasWarranty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $YearOfManufacture;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SerialNumber;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ModelNumber;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $BraceletType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $BraceletRefNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CrystalType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $MovementType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $TextDescription;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $TextLocation;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $StockModelType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $StockModelNumber;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DialType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $BezelType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Boxed;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Condition;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Misc1;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Misc2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Misc3;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Misc4;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $QtyInStock;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $StockHoldingPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DatePurchased;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $TradePrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $FullRRP;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $RetailPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SellerContactFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $LocationFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $StatusHistory;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ExternalID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Notes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight9;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight14;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight18;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight22;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $WeightTotal;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $WatchMaterialType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Certificated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Diameter;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $DiameterUnit;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Discontinued;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $LastUpdated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateSold;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__BezelType__30F848ED
        * @FromRole:Stock
        * @ToRole:Bezel
        */
        public $Bezel;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__BraceletT__2F10007B
        * @FromRole:Stock
        * @ToRole:Bracelet
        */
        public $Bracelet;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__DialType__300424B4
        * @FromRole:Stock
        * @ToRole:Dial
        */
        public $Dial;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Images__StockFK__25869641
        * @FromRole:Stock
        * @ToRole:Image
        */
        public $Images;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__Manufactu__2D27B809
        * @FromRole:Stock
        * @ToRole:Manufacturer
        */
        public $Manufacturer;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__ModelFK__2E1BDC42
        * @FromRole:Stock
        * @ToRole:Model
        */
        public $Model;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__WatchMate__4BAC3F29
        * @FromRole:Stock
        * @ToRole:WatchMaterial
        */
        public $WatchMaterial;
    

       /**
        * Function to create an instance of Stock
        * @param Edm.Int32 $ID
        */
        public static function CreateStock(
            $ID)
        {   
            $Stock = new Stock();
            $Stock->ID = $ID;
            return $Stock;
        }

       /**
        * Constructor for Stock
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Bezel'] = 'Bezel';
            $this->_entityMap['Bracelet'] = 'Bracelet';
            $this->_entityMap['Dial'] = 'Dial';
            $this->_entityMap['Images'] = 'Image';
            $this->_entityMap['Manufacturer'] = 'Manufacturer';
            $this->_entityMap['Model'] = 'Model';
            $this->_entityMap['WatchMaterial'] = 'WatchMaterial';
            $this->Bezel = array();
            $this->Bracelet = array();
            $this->Dial = array();
            $this->Images = array();
            $this->Manufacturer = array();
            $this->Model = array();
            $this->WatchMaterial = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Bezel
    * @type:EntityType
    * @key:ID
    */
    class Bezel extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__BezelType__30F848ED
        * @FromRole:Bezel
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of Bezel
        * @param Edm.Int32 $ID
        */
        public static function CreateBezel(
            $ID)
        {   
            $Bezel = new Bezel();
            $Bezel->ID = $ID;
            return $Bezel;
        }

       /**
        * Constructor for Bezel
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Bracelet
    * @type:EntityType
    * @key:ID
    */
    class Bracelet extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__BraceletT__2F10007B
        * @FromRole:Bracelet
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of Bracelet
        * @param Edm.Int32 $ID
        */
        public static function CreateBracelet(
            $ID)
        {   
            $Bracelet = new Bracelet();
            $Bracelet->ID = $ID;
            return $Bracelet;
        }

       /**
        * Constructor for Bracelet
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Dial
    * @type:EntityType
    * @key:ID
    */
    class Dial extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__DialType__300424B4
        * @FromRole:Dial
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of Dial
        * @param Edm.Int32 $ID
        */
        public static function CreateDial(
            $ID)
        {   
            $Dial = new Dial();
            $Dial->ID = $ID;
            return $Dial;
        }

       /**
        * Constructor for Dial
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Image
    * @type:EntityType
    * @key:ID
    */
    class Image extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $StockFK;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ImageNum;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Imagename;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Binary
        */
        public $Image1;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Type;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Images__StockFK__25869641
        * @FromRole:Image
        * @ToRole:Stock
        */
        public $Stock;
    

       /**
        * Function to create an instance of Image
        * @param Edm.Int32 $ID
        * @param Edm.Int32 $StockFK
        * @param Edm.Int32 $ImageNum
        * @param Edm.String $Imagename
        * @param Edm.Int32 $Type
        */
        public static function CreateImage(
            $ID, 
            $StockFK, 
            $ImageNum, 
            $Imagename, 
            $Type)
        {   
            $Image = new Image();
            $Image->ID = $ID;
            $Image->StockFK = $StockFK;
            $Image->ImageNum = $ImageNum;
            $Image->Imagename = $Imagename;
            $Image->Type = $Type;
            return $Image;
        }

       /**
        * Constructor for Image
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stock'] = 'Stock';
            $this->Stock = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Manufacturer
    * @type:EntityType
    * @key:ID
    */
    class Manufacturer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Catalogue;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__Manufactu__2D27B809
        * @FromRole:Manufacturer
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of Manufacturer
        * @param Edm.Int32 $ID
        */
        public static function CreateManufacturer(
            $ID)
        {   
            $Manufacturer = new Manufacturer();
            $Manufacturer->ID = $ID;
            return $Manufacturer;
        }

       /**
        * Constructor for Manufacturer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Model
    * @type:EntityType
    * @key:ID
    */
    class Model extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ManufacturerFK;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Number;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReorderLevel;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__ModelFK__2E1BDC42
        * @FromRole:Model
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of Model
        * @param Edm.Int32 $ID
        */
        public static function CreateModel(
            $ID)
        {   
            $Model = new Model();
            $Model->ID = $ID;
            return $Model;
        }

       /**
        * Constructor for Model
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:WatchMaterial
    * @type:EntityType
    * @key:ID
    */
    class WatchMaterial extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK__Stock__WatchMate__4BAC3F29
        * @FromRole:WatchMaterial
        * @ToRole:Stock
        */
        public $Stocks;
    

       /**
        * Function to create an instance of WatchMaterial
        * @param Edm.Int32 $ID
        */
        public static function CreateWatchMaterial(
            $ID)
        {   
            $WatchMaterial = new WatchMaterial();
            $WatchMaterial->ID = $ID;
            return $WatchMaterial;
        }

       /**
        * Constructor for WatchMaterial
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Stocks'] = 'Stock';
            $this->Stocks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:StockList
    * @type:EntityType
    * @key:ID
    */
    class StockList extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Manufacturer;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Model;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Model_Number;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:true
        */
        public $Gender;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $YearOfManufacture;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:64
        * @FixedLength:false
        */
        public $Bracelet;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Condition;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $RetailPrice;
    

       /**
        * Function to create an instance of StockList
        * @param Edm.Int32 $ID
        */
        public static function CreateStockList(
            $ID)
        {   
            $StockList = new StockList();
            $StockList->ID = $ID;
            return $StockList;
        }

       /**
        * Constructor for StockList
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * Container class BQWATCHESEntities, Namespace: BQWATCHESModel
    */
    class BQWATCHESEntities extends ObjectContext
    {
    
        protected $_Enquiries;
        protected $_Stocks;
        protected $_Bezels;
        protected $_Bracelets;
        protected $_Dials;
        protected $_Images;
        protected $_Manufacturers;
        protected $_Models;
        protected $_WatchMaterials;
        protected $_StockLists;
        
       /**
        * The constructor for BQWATCHESEntities accepting service URI
        */
        public function __construct($uri = "")
        {
            if(strlen($uri) == 0)
            {
                $uri = DEFAULT_ODATA_SERVICE_URL;
            }

            if (Utility::reverseFind($uri, '/') != strlen($uri) - 1)
            {
                $uri = $uri . '/';
            }

            $this->_baseURI = $uri;
            parent::__construct($this->_baseURI);
            $this->_entities = array(
                                "Enquiries",
                                "Stocks",
                                "Bezels",
                                "Bracelets",
                                "Dials",
                                "Images",
                                "Manufacturers",
                                "Models",
                                "WatchMaterials",
                                "StockLists");
            $this->_entitySet2Type = array(
                                            "enquiries" => "Enquiry", 
                                            "stocks" => "Stock", 
                                            "bezels" => "Bezel", 
                                            "bracelets" => "Bracelet", 
                                            "dials" => "Dial", 
                                            "images" => "Image", 
                                            "manufacturers" => "Manufacturer", 
                                            "models" => "Model", 
                                            "watchmaterials" => "WatchMaterial", 
                                            "stocklists" => "StockList");
            $this->_entityType2Set = array(
                                            "enquiry" => "Enquiries", 
                                            "stock" => "Stocks", 
                                            "bezel" => "Bezels", 
                                            "bracelet" => "Bracelets", 
                                            "dial" => "Dials", 
                                            "image" => "Images", 
                                            "manufacturer" => "Manufacturers", 
                                            "model" => "Models", 
                                            "watchmaterial" => "WatchMaterials", 
                                            "stocklist" => "StockLists");

            $this->_association = array();

    
            $this->_Enquiries = new DataServiceQuery('/'.'Enquiries', $this);
            $this->_Stocks = new DataServiceQuery('/'.'Stocks', $this);
            $this->_Bezels = new DataServiceQuery('/'.'Bezels', $this);
            $this->_Bracelets = new DataServiceQuery('/'.'Bracelets', $this);
            $this->_Dials = new DataServiceQuery('/'.'Dials', $this);
            $this->_Images = new DataServiceQuery('/'.'Images', $this);
            $this->_Manufacturers = new DataServiceQuery('/'.'Manufacturers', $this);
            $this->_Models = new DataServiceQuery('/'.'Models', $this);
            $this->_WatchMaterials = new DataServiceQuery('/'.'WatchMaterials', $this);
            $this->_StockLists = new DataServiceQuery('/'.'StockLists', $this);

        }

    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Enquiries
         * @return DataServiceQuery
         */
        public function Enquiries()
        {
            $this->_Enquiries->ClearAllOptions();
            return $this->_Enquiries;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Stocks
         * @return DataServiceQuery
         */
        public function Stocks()
        {
            $this->_Stocks->ClearAllOptions();
            return $this->_Stocks;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Bezels
         * @return DataServiceQuery
         */
        public function Bezels()
        {
            $this->_Bezels->ClearAllOptions();
            return $this->_Bezels;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Bracelets
         * @return DataServiceQuery
         */
        public function Bracelets()
        {
            $this->_Bracelets->ClearAllOptions();
            return $this->_Bracelets;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Dials
         * @return DataServiceQuery
         */
        public function Dials()
        {
            $this->_Dials->ClearAllOptions();
            return $this->_Dials;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Images
         * @return DataServiceQuery
         */
        public function Images()
        {
            $this->_Images->ClearAllOptions();
            return $this->_Images;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Manufacturers
         * @return DataServiceQuery
         */
        public function Manufacturers()
        {
            $this->_Manufacturers->ClearAllOptions();
            return $this->_Manufacturers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Models
         * @return DataServiceQuery
         */
        public function Models()
        {
            $this->_Models->ClearAllOptions();
            return $this->_Models;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset WatchMaterials
         * @return DataServiceQuery
         */
        public function WatchMaterials()
        {
            $this->_WatchMaterials->ClearAllOptions();
            return $this->_WatchMaterials;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset StockLists
         * @return DataServiceQuery
         */
        public function StockLists()
        {
            $this->_StockLists->ClearAllOptions();
            return $this->_StockLists;
        }
    
       /**
        * Functions for adding object to the entityset/collection
        */
    
       /**
        * Add Enquiries
        * @param Enquiries $object
        */
      public function AddToEnquiries($object)
        {
            return parent::AddObject('Enquiries', $object);
        }
    
       /**
        * Add Stocks
        * @param Stocks $object
        */
      public function AddToStocks($object)
        {
            return parent::AddObject('Stocks', $object);
        }
    
       /**
        * Add Bezels
        * @param Bezels $object
        */
      public function AddToBezels($object)
        {
            return parent::AddObject('Bezels', $object);
        }
    
       /**
        * Add Bracelets
        * @param Bracelets $object
        */
      public function AddToBracelets($object)
        {
            return parent::AddObject('Bracelets', $object);
        }
    
       /**
        * Add Dials
        * @param Dials $object
        */
      public function AddToDials($object)
        {
            return parent::AddObject('Dials', $object);
        }
    
       /**
        * Add Images
        * @param Images $object
        */
      public function AddToImages($object)
        {
            return parent::AddObject('Images', $object);
        }
    
       /**
        * Add Manufacturers
        * @param Manufacturers $object
        */
      public function AddToManufacturers($object)
        {
            return parent::AddObject('Manufacturers', $object);
        }
    
       /**
        * Add Models
        * @param Models $object
        */
      public function AddToModels($object)
        {
            return parent::AddObject('Models', $object);
        }
    
       /**
        * Add WatchMaterials
        * @param WatchMaterials $object
        */
      public function AddToWatchMaterials($object)
        {
            return parent::AddObject('WatchMaterials', $object);
        }
    
       /**
        * Add StockLists
        * @param StockLists $object
        */
      public function AddToStockLists($object)
        {
            return parent::AddObject('StockLists', $object);
        }
    

       /**
        * This function returns the entities.
        */
        public function getEntities()
        {
            return $this->_entities;
        }
    }
  
?>